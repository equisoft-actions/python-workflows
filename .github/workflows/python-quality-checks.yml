name: Python Quality Checks

on:
  workflow_call:
    inputs:
      workflow-path:
        description: Workflow file used for change detection.
        required: false
        type: string
      working-directory:
        description: Relative path under $GITHUB_WORKSPACE where the project is located.
        required: false
        type: string

jobs:
  pre-checks:
    name: Pre-checks
    runs-on: ubuntu-latest
    outputs:
      should-skip: ${{ steps.skip-check.outputs.should_skip }}

    steps:
      - name: Skip Check
        id: skip-check
        uses: fkirc/skip-duplicate-actions@v5
        with:
          concurrent_skipping: same_content
          do_not_skip: >-
            [
              "push",
              "schedule",
              "workflow_dispatch"
            ]
          paths: >-
            [
              ".tool-versions",
              "${{ inputs.workflow-path }}",
              "${{ inputs.working-directory }}/**"
            ]
          skip_after_successful_duplicate: true

  dependencies-manager:
    name: Dependencies manager finder
    needs: [ pre-checks ]
    if: ${{ needs.pre_checks.outputs.should-skip != 'true' }}
    runs-on: ubuntu-latest
    outputs:
      dm: ${{ steps.dependencies-manager.outputs.dm }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Search Poetry
        id: search-poetry
        shell: bash
        run: echo "poetry-str=$(cat .tool-versions | grep poetry | awk '{print $1}')" >> $GITHUB_OUTPUT

      - name: Check if poetry
        id: check-if-poetry
        shell: bash
        run: echo "use-poetry=$(expr '${{ steps.search-poetry.outputs.poetry-str }}' == 'poetry')" >> $GITHUB_OUTPUT

      - name: Dependecies Manager
        id: dependencies-manager
        shell: bash
        run: if [[ ${{ steps.check-if-poetry.outputs.use-poetry }} == 1 ]]; then echo 'dm=poetry'; else echo 'dm=pipenv'; fi >> $GITHUB_OUTPUT

  setup:
    name: Setup
    needs: [ pre-checks ]
    if: ${{ needs.pre_checks.outputs.should-skip != 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Python
        uses: equisoft-actions/setup-python@v1

  unit-tests:
    name: Unit tests
    needs: [ setup, dependencies-manager ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Python
        uses: equisoft-actions/setup-python@v1

      - name: Run pytest
        working-directory: ${{ inputs.working-directory }}
        run: ${{ needs.dependencies-manager.outputs.dm }} run pytest -v

  type-check:
    name: Type check
    needs: [ setup, dependencies-manager ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Python
        uses: equisoft-actions/setup-python@v1

      - name: Run pytype
        working-directory: ${{ inputs.working-directory }}
        run: ${{ needs.dependencies-manager.outputs.dm }} run pytype

  code-style:
    name: Code style
    needs: [ setup, dependencies-manager ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Python
        uses: equisoft-actions/setup-python@v1

      - name: Run pycodestyle
        working-directory: ${{ inputs.working-directory }}
        run: ${{ needs.dependencies-manager.outputs.dm }} run pycodestyle --statistics --count
